// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessions      Session[]
  conversations Conversation[]
  userRoles     UserRole[]
  @@map("users")
}

model Conversation {
  id        String   @id @default(cuid())
  title     String?
  settings  Json?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  @@index([userId, createdAt])
  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  content        String
  role           MessageRole
  conversationId String
  parentId       String?
  sources        Json?
  usage          Json?
  metadata       Json?
  createdAt      DateTime @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  parent         Message?     @relation("MessageThread", fields: [parentId], references: [id])
  children       Message[]    @relation("MessageThread")
  @@index([conversationId, createdAt])
  @@map("messages")
}

enum MessageRole { USER ASSISTANT SYSTEM }

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  role   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, role])
  @@map("user_roles")
}